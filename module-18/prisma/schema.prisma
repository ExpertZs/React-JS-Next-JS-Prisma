// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  firstName             String        @db.VarChar(50)
  middleName            String        @db.VarChar(50)
  lastName              String        @db.VarChar(50)
  mobile                String        @db.VarChar(15)
  email                 String        @db.VarChar(15)
  passwordHash          String        @db.VarChar(32)
  registered_at         DateTime      @default(now()) @db.Timestamp(0)
  last_login            DateTime      @default(now()) @updatedAt @db.Timestamp(0)
  intro                 String        @db.TinyText
  profile               String        @db.Text

  posts                 posts[]
}

model posts {
  id                    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  author_id             BigInt        @db.UnsignedBigInt
  parent_id             BigInt        @db.UnsignedBigInt
  title                 String        @db.VarChar(75)
  metaTitle             String        @db.VarChar(100)
  slug                  String        @db.VarChar(100)
  summary               String        @db.TinyText
  published             Int           @db.TinyInt
  created_at            DateTime      @default(now()) @db.Timestamp(0)
  published_at          DateTime      @default(now()) @db.Timestamp(0)
  updated_at            DateTime      @default(now()) @updatedAt @db.Timestamp(0)
  content               String        @db.Text

  post_comments         post_comments[]
  post_tags             post_tags[]
  post_categories       post_categories[]
  post_metas            post_metas[]
  users                 users         @relation(fields: [author_id], references: [id],onDelete: Restrict,onUpdate:Cascade)


}

model post_comments {
  id                    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  post_id               BigInt        @db.UnsignedBigInt
  parent_id             BigInt        @db.UnsignedBigInt
  title                 String        @db.VarChar(100)
  published             Int           @db.TinyInt
  created_at            DateTime      @default(now()) @db.Timestamp(0)
  published_at          DateTime      @default(now()) @db.Timestamp(0)
  content               String        @db.Text

  posts                 posts         @relation(fields: [post_id], references: [id],onDelete: Restrict,onUpdate:Cascade)
 
}

model categories {
  id                    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  parent_id             BigInt        @db.UnsignedBigInt
  title                 String        @db.VarChar(75)
  metaTitle             String        @db.VarChar(100)
  slug                  String        @db.VarChar(100)
  content               String        @db.Text

  post_categories       post_categories[]

}

model post_categories {
  post_id                    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  category_id                BigInt        @db.UnsignedBigInt
  
  posts                      posts         @relation(fields: [post_id], references: [id],onDelete: Restrict,onUpdate:Cascade)
  categories                 categories         @relation(fields: [category_id], references: [id],onDelete: Restrict,onUpdate:Cascade)

}

model tags {
  id                    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  title                 String        @db.VarChar(75)
  metaTitle             String        @db.VarChar(100)
  slug                  String        @db.VarChar(100)
  content               String        @db.Text

  post_tags            post_tags[]

}

model post_tags {
  post_id               BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  tag_id                BigInt        @db.UnsignedBigInt

  posts                 posts         @relation(fields: [post_id], references: [id],onDelete: Restrict,onUpdate:Cascade)
  tags                  tags          @relation(fields: [tag_id], references: [id],onDelete: Restrict,onUpdate:Cascade)
  

}

model post_metas {
  id                    BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  post_id               BigInt        @db.UnsignedBigInt
  key                   String        @db.VarChar(50)
  content               String        @db.Text

  posts                 posts         @relation(fields: [post_id], references: [id],onDelete: Restrict,onUpdate:Cascade)

}